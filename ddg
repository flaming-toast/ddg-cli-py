#!/usr/bin/env python2
import sys, select
import argparse 
import json, urllib2
import htmlentitydefs, re
import shelve
import os
import duckduckgo
from bs4 import BeautifulSoup
from termcolor import colored, cprint
from configobj import ConfigObj

def parse_args():

	shelf = open_shelf()

	stdin = ""
	while sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
		line = sys.stdin.readline()
		if line:
			stdin += line.replace('\n', ' ')
		else: # an empty line means stdin has been closed
			break

	config = ConfigObj('ddg.ini')
	
	arg_parser = argparse.ArgumentParser()
	arg_parser.add_argument("query", nargs='?', help="Query to duckduckgo")
	arg_parser.add_argument("-b", "--browser", help="Specify browser")
	arg_parser.add_argument("-r", "--result",  help="Go to result # with specified browser")
	arg_parser.add_argument("-m", "--max-results", help="Max number of results to display at a time. Default is 10.")
	arg_parser.add_argument("-n", "--next-page", action="store_true", help="Next page of results")
	args = arg_parser.parse_args()

 	# cmd line args > ddg.ini settings > default value if available
	browser = args.browser or config.get('browser')
	max_results = args.max_results or config.get('max_results') or False
	if args.next_page:
		more = True
		query = shelf['query']
	else:
		more = False
 		query = args.query or stdin or "jessica yu" # lol caine's idea

	if not browser and args.result:
		print "Specify browser with -b or in ddg.ini"
		sys.exit(1)
	else:
		if args.result and get_result_url(args.result):
			os.system(browser + " " + get_result_url(args.result))
			sys.exit(0)
		else:
			return (query, browser, max_results, more)

def get_results(query, browser, max_results, more):

	shelf = open_shelf()
	if 'query' not in shelf or shelf['query'] != query:
		shelf.clear()
		shelf['query'] = query

	if more and 'next' in shelf:
		results = json.load(urllib2.urlopen(base_url+shelf['next']))
	else: 
		results = json.load(urllib2.urlopen(make_call(query)))

	p = re.compile(r'<.*?>')

	if not max_results: # it was never set
		max_results = len(results)-1
	else:
		max_results = min(len(results)-1, int(max_results)) 

	if len(results) == 1: # external link to google b/c no results
		print "No Results"
		sys.exit(0)		
	else: 
		print "Results:"

	shelf['query'] = query
	for i in range(0, max_results):
		title = BeautifulSoup(p.sub('', results[i]['t'])).prettify(formatter=None)
		descr = BeautifulSoup(p.sub('', results[i]['a'])).prettify(formatter=None)
		shelf[str(i)] = results[i]['u'] 	

		cprint("#" + str(i+1) + " " + title.encode('utf-8').rstrip(), attrs=['bold', 'underline'])
		print descr.encode('utf-8').rstrip()
		cprint(results[i]['u'].rstrip(), "cyan") 
		print "\n"

	# should take account max_results but not gonna implement that right now
	if 'n' in results[len(results)-1]:
		next_call = results[len(results)-1]['n']
		shelf['next'] = next_call

def get_result_url(number): 
	shelf = open_shelf()
	if not shelf: 
		return False
	return shelf[str(number)]

def get_instant_answer(query, more):

	# Examples: 1+1, what is my ip address, arch awesome

	r = duckduckgo.query(query)

	if r.type == 'disambiguation' or more:
		return
	cprint("Instant answer section", attrs=['bold', 'underline'])
	print "==================================================="
	if r.heading:
		cprint(r.heading, "yellow", attrs=['bold'])
	if r.abstract and r.abstract.text and r.abstract.source:
		print r.abstract.text
		print "Source: " + r.abstract.source
		cprint(r.abstract.url, "green")
	if r.answer:
		print r.answer.text
	if r.results:
		for i in range(0, len(r.results)):
			cprint(r.results[i].text, attrs=['bold'])
			print r.results[i].url
			print "\n"
	print "==================================================="
	print "\n"

def print_summary(query, browser, max_results):
	print "Query: " + query
	if max_results:
		print "Max results to display: " + str(max_results)
	print "Browser: " + str(browser)
	print "\n"

def open_shelf():
 return shelve.open(os.path.dirname(os.path.realpath(__file__))+'current_search')

def make_call(query):
	return os.environ['DDG_CALL'].replace('query', query)

def main():
	query, browser, max_results, more = parse_args()
	print_summary(query, browser, max_results)
	get_instant_answer(query, more)
	get_results(query, browser, max_results, more)

main()
